name: Build Packages

on:
  push:
    tags:
      - 'v*'  # Run when tags starting with v are pushed
    branches:
      - main  # Optionally run on main branch pushes for testing
  pull_request:
    branches:
      - main  # Run on PRs to main branch
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Don't cancel other jobs if one fails
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10.11"]  # Version compatible with Ubuntu 24.04, Windows, and macOS arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip  # Cache pip dependencies

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Install platform-specific dependencies
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk tesseract-ocr

      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest'
        run: |
          brew install tesseract

      # For Windows, Tesseract will need to be downloaded and installed
      # This is a simplified approach - you might need to customize this
      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          # Download Tesseract from GitHub
          Invoke-WebRequest -Uri "https://github.com/UB-Mannheim/tesseract/releases/download/v5.4.0.20240606/tesseract-ocr-w64-setup-5.4.0.20240606.exe" -OutFile tesseract-installer.exe
          # Install silently
          Start-Process -FilePath .\tesseract-installer.exe -ArgumentList '/S' -Wait
          # Add to PATH
          echo "C:\Program Files\Tesseract-OCR" | Out-File -FilePath $env:GITHUB_PATH -Append

      - name: Build package
        run: |
          python build.py

      # Determine artifact name based on platform
      - name: Set artifact name for Linux
        if: matrix.os == 'ubuntu-latest'
        run: echo "ARTIFACT_NAME=shiftplan-to-ics-linux" >> $GITHUB_ENV

      - name: Set artifact name for Windows
        if: matrix.os == 'windows-latest'
        run: echo "ARTIFACT_NAME=shiftplan-to-ics-windows" >> $env:GITHUB_ENV

      - name: Set artifact name for macOS
        if: matrix.os == 'macos-latest'
        run: echo "ARTIFACT_NAME=shiftplan-to-ics-macos" >> $GITHUB_ENV

      # Create a ZIP archive for macOS since .app bundles have spaces and nested files
      - name: Create ZIP archive for macOS
        if: matrix.os == 'macos-latest'
        run: |
          cd dist
          echo "Listing contents of dist directory:"
          ls -la
          
          # Check for .app files with different possible names
          APP_FILE=$(find . -maxdepth 1 -name "*.app" | head -n 1)
          
          if [ -n "$APP_FILE" ]; then
            echo "Found app bundle: $APP_FILE"
            zip -r "ShiftPlanToICS-macOS.zip" "$APP_FILE"
          else
            echo "No .app bundle found, zipping all contents of dist directory"
            zip -r "ShiftPlanToICS-macOS.zip" .
          fi
        shell: bash
      
      # Create a ZIP archive for Linux binaries to keep consistent naming
      - name: Create ZIP archive for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd dist
          echo "Listing contents of dist directory:"
          ls -la
          
          # Check if there are executables
          if [ -f "shiftplan_to_ics" ]; then
            echo "Found Linux executable"
            zip -r "ShiftPlanToICS-Linux.zip" *
          else
            echo "Zipping all contents of dist directory"
            zip -r "ShiftPlanToICS-Linux.zip" .
          fi
        shell: bash
      
      # Create a ZIP archive for Windows binaries to keep consistent naming
      - name: Create ZIP archive for Windows
        if: matrix.os == 'windows-latest'
        run: |
          cd dist
          echo "Listing contents of dist directory:"
          dir
          
          # Zip all exe files
          Compress-Archive -Path *.exe -DestinationPath "ShiftPlanToICS-Windows.zip" -Force
          
          if (Test-Path "ShiftPlanToICS-Windows.zip") {
            echo "Created Windows zip archive"
          } else {
            echo "Creating zip with all contents of dist"
            Compress-Archive -Path * -DestinationPath "ShiftPlanToICS-Windows.zip" -Force
          }

      # Upload built artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            dist/
          retention-days: 7

  # Create GitHub Release with all artifacts when a tag is pushed
  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: List artifacts
        run: ls -R artifacts
        
      # Create release assets directory with uniform naming
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Copy ZIP files with consistent naming
          find artifacts -name "ShiftPlanToICS-*.zip" -exec cp {} release-assets/ \;
          
          # Also copy any individual executables (as backup)
          find artifacts -name "*.exe" -exec cp {} release-assets/ \;
          find artifacts -name "shiftplan_to_ics" -exec cp {} release-assets/ \;
          
          echo "Release assets contents:"
          ls -la release-assets
      
      # Create a release
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            release-assets/* 